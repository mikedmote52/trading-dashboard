name: Blue/Green Deployment for AlphaStack V3

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (blue/green)'
        required: true
        default: 'blue'
        type: choice
        options:
        - blue
        - green
      force_deployment:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean
      skip_health_checks:
        description: 'Skip extended health checks'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: 1800  # 30 minutes
  HEALTH_CHECK_TIMEOUT: 300 # 5 minutes
  ALPHASTACK_PROTECTION: true

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Deployment Prerequisites
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      target_environment: ${{ steps.validation.outputs.target_environment }}
      current_environment: ${{ steps.validation.outputs.current_environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git operations
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate AlphaStack Protection
      id: alphastack_check
      run: |
        echo "Validating AlphaStack protection..."
        
        # Check feature flags
        if ! node -e "
          const flags = require('./src/config/feature-flags.js');
          const config = flags.getConfig();
          
          if (!config.protection.alphastack_immutable) {
            console.error('❌ AlphaStack protection is disabled');
            process.exit(1);
          }
          
          console.log('✅ AlphaStack protection verified');
        "; then
          echo "::error::AlphaStack protection validation failed"
          exit 1
        fi
        
        echo "alphastack_protected=true" >> $GITHUB_OUTPUT
    
    - name: Lint and Test
      run: |
        echo "Running linting and tests..."
        
        # Run any existing tests
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test || true  # Don't fail deployment on test failures unless forced
        fi
        
        # Validate critical files
        if [ ! -f "server.js" ]; then
          echo "::error::Critical file missing: server.js"
          exit 1
        fi
        
        if [ ! -f "src/config/feature-flags.js" ]; then
          echo "::error::Critical file missing: feature-flags.js"
          exit 1
        fi
        
        echo "✅ Validation passed"
    
    - name: Determine deployment strategy
      id: validation
      run: |
        # Determine target environment
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TARGET_ENV="${{ github.event.inputs.environment }}"
        else
          # Auto-determine based on current deployment state
          # For demo, default to blue
          TARGET_ENV="blue"
          
          # In production, this would check current Render deployment
          # TARGET_ENV=$(scripts/env/detect-current-env.sh)
        fi
        
        echo "Target environment: $TARGET_ENV"
        echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
        
        # Determine current environment (opposite of target)
        if [ "$TARGET_ENV" = "blue" ]; then
          CURRENT_ENV="green"
        else
          CURRENT_ENV="blue"
        fi
        
        echo "current_environment=$CURRENT_ENV" >> $GITHUB_OUTPUT
        
        # Check if deployment should proceed
        SHOULD_DEPLOY="true"
        
        if [ "${{ github.event.inputs.force_deployment }}" != "true" ]; then
          # Add additional validation logic here
          echo "Checking deployment conditions..."
          
          # Example: Check if there are any critical alerts
          # if [ -f "logs/critical-alerts.log" ] && [ -s "logs/critical-alerts.log" ]; then
          #   echo "::warning::Critical alerts detected, deployment may be risky"
          # fi
        fi
        
        echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "✅ Deployment strategy determined: $TARGET_ENV"

  # Build and prepare deployment
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build CSS assets
      run: npm run build:css
    
    - name: Validate build output
      run: |
        if [ ! -f "public/assets/tailwind.css" ]; then
          echo "::error::Build failed: CSS not generated"
          exit 1
        fi
        
        echo "✅ Build validation passed"
    
    - name: Prepare environment configuration
      env:
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
      run: |
        echo "Preparing environment configuration for $TARGET_ENV..."
        
        # Create environment-specific configuration
        echo "DEPLOY_ENV=$TARGET_ENV" > .env.deployment
        echo "DEPLOY_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> .env.deployment
        echo "DEPLOY_VERSION=${{ github.sha }}" >> .env.deployment
        echo "DEPLOY_BRANCH=${{ github.ref_name }}" >> .env.deployment
        echo "ALPHASTACK_PROTECTION=true" >> .env.deployment
        echo "CIRCUIT_BREAKER=true" >> .env.deployment
        
        # Set feature flags for target environment
        if [ "$TARGET_ENV" = "blue" ]; then
          echo "ALPHASTACK_V3_ENABLED=true" >> .env.deployment
          echo "V3_PERFORMANCE_MODE=true" >> .env.deployment
        else
          echo "ALPHASTACK_V3_ENABLED=true" >> .env.deployment
          echo "V3_REAL_TIME_UPDATES=true" >> .env.deployment
        fi
        
        echo "✅ Environment configuration prepared"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ needs.validate.outputs.target_environment }}
        path: |
          public/assets/
          .env.deployment
        retention-days: 7

  # Deploy to staging/preview environment first
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ needs.validate.outputs.target_environment }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Deploy to staging environment
      env:
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        STAGING_DEPLOY_HOOK: ${{ secrets.STAGING_DEPLOY_HOOK }}
      run: |
        echo "Deploying to staging environment..."
        
        # Trigger staging deployment
        if [ -n "$STAGING_DEPLOY_HOOK" ]; then
          curl -X POST "$STAGING_DEPLOY_HOOK" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -d '{"clear_cache": true}' || {
            echo "::warning::Staging deployment trigger failed"
          }
        fi
        
        echo "✅ Staging deployment initiated"
    
    - name: Wait for staging deployment
      timeout-minutes: 15
      run: |
        echo "Waiting for staging deployment to complete..."
        
        # Poll staging health endpoint
        STAGING_URL="${{ secrets.STAGING_URL }}"
        MAX_ATTEMPTS=30
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Health check attempt $ATTEMPT/$MAX_ATTEMPTS"
          
          if curl -f -s "$STAGING_URL/api/health" >/dev/null 2>&1; then
            echo "✅ Staging deployment healthy"
            break
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "::error::Staging deployment health check failed"
            exit 1
          fi
          
          sleep 30
          ((ATTEMPT++))
        done

    - name: Run staging health checks
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        echo "Running comprehensive health checks on staging..."
        
        # Run health check script
        DEPLOY_URL="$STAGING_URL" node scripts/health/comprehensive-health-check.js --save || {
          echo "::error::Staging health checks failed"
          exit 1
        }
        
        echo "✅ Staging health checks passed"

  # Production Blue/Green deployment
  deploy-production:
    name: Blue/Green Production Deployment
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-staging]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ needs.validate.outputs.target_environment }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Sync environment configuration
      env:
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
        POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      run: |
        echo "Syncing environment configuration..."
        
        # Export required environment variables
        export POLYGON_API_KEY="$POLYGON_API_KEY"
        export APCA_API_KEY_ID="$ALPACA_API_KEY"
        export APCA_API_SECRET_KEY="$ALPACA_SECRET_KEY"
        export ALPACA_API_KEY="$ALPACA_API_KEY"
        export ALPACA_SECRET_KEY="$ALPACA_SECRET_KEY"
        export ADMIN_TOKEN="$ADMIN_TOKEN"
        
        # Run environment sync script
        chmod +x scripts/env/sync-environments.sh
        scripts/env/sync-environments.sh "$TARGET_ENV" full || {
          echo "::error::Environment sync failed"
          exit 1
        }
        
        echo "✅ Environment configuration synced"
    
    - name: Execute Blue/Green deployment
      id: deployment
      env:
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
        CURRENT_ENV: ${{ needs.validate.outputs.current_environment }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        PROD_DEPLOY_HOOK: ${{ secrets.PROD_DEPLOY_HOOK }}
        PROD_URL: ${{ secrets.PROD_URL }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      timeout-minutes: 30
      run: |
        echo "Starting Blue/Green deployment to $TARGET_ENV..."
        
        # Make deployment script executable
        chmod +x scripts/deploy/blue-green-deploy.sh
        
        # Set deployment environment variables
        export DEPLOY_URL="$PROD_URL"
        export TARGET_ENVIRONMENT="$TARGET_ENV"
        
        # Execute deployment with monitoring
        scripts/deploy/blue-green-deploy.sh || {
          echo "deployment_success=false" >> $GITHUB_OUTPUT
          echo "::error::Blue/Green deployment failed"
          exit 1
        }
        
        echo "deployment_success=true" >> $GITHUB_OUTPUT
        echo "✅ Blue/Green deployment completed successfully"
    
    - name: Validate production deployment
      if: steps.deployment.outputs.deployment_success == 'true'
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
        SKIP_HEALTH_CHECKS: ${{ github.event.inputs.skip_health_checks }}
      timeout-minutes: 10
      run: |
        echo "Validating production deployment..."
        
        if [ "$SKIP_HEALTH_CHECKS" = "true" ]; then
          echo "Skipping extended health checks as requested"
          exit 0
        fi
        
        # Wait for deployment to stabilize
        sleep 30
        
        # Run comprehensive health checks
        DEPLOY_URL="$PROD_URL" node scripts/health/comprehensive-health-check.js || {
          echo "::error::Production health validation failed"
          
          # Trigger automatic rollback
          echo "Triggering automatic rollback..."
          chmod +x scripts/deploy/rollback.sh
          scripts/deploy/rollback.sh emergency "Production health validation failed" || {
            echo "::error::Automatic rollback failed - manual intervention required"
            exit 1
          }
          
          exit 1
        }
        
        # Run AlphaStack-specific validation
        DEPLOY_URL="$PROD_URL" node scripts/health/alphastack-api-validator.js --save || {
          echo "::warning::AlphaStack validation warnings detected"
        }
        
        echo "✅ Production deployment validation completed"
    
    - name: Performance monitoring
      if: steps.deployment.outputs.deployment_success == 'true'
      env:
        PROD_URL: ${{ secrets.PROD_URL }}
      run: |
        echo "Starting post-deployment performance monitoring..."
        
        # Run performance test
        DEPLOY_URL="$PROD_URL" node scripts/monitoring/performance-tracker.js test || {
          echo "::warning::Performance test completed with warnings"
        }
        
        echo "✅ Performance monitoring completed"
    
    - name: Update deployment status
      if: always()
      env:
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
        DEPLOYMENT_SUCCESS: ${{ steps.deployment.outputs.deployment_success }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Create deployment record
        echo "Recording deployment status..."
        
        DEPLOYMENT_STATUS="success"
        if [ "$DEPLOYMENT_SUCCESS" != "true" ]; then
          DEPLOYMENT_STATUS="failed"
        fi
        
        # Create deployment manifest
        cat > deployment-manifest.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": "$TARGET_ENV",
          "status": "$DEPLOYMENT_STATUS",
          "version": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "workflow_run": "${{ github.run_id }}",
          "actor": "${{ github.actor }}",
          "event": "${{ github.event_name }}"
        }
        EOF
        
        # Send Slack notification
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          STATUS_EMOJI="✅"
          STATUS_COLOR="good"
          
          if [ "$DEPLOYMENT_STATUS" = "failed" ]; then
            STATUS_EMOJI="❌"
            STATUS_COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$STATUS_COLOR\",
                \"title\": \"AlphaStack V3 Deployment $DEPLOYMENT_STATUS\",
                \"text\": \"$STATUS_EMOJI Environment: $TARGET_ENV\\nVersion: ${{ github.sha }}\\nBranch: ${{ github.ref_name }}\",
                \"ts\": $(date +%s)
              }]
            }" \
            "$SLACK_WEBHOOK_URL" || true
        fi
        
        echo "✅ Deployment status updated"

  # Cleanup old environments
  cleanup:
    name: Cleanup Old Environment
    runs-on: ubuntu-latest
    needs: [validate, deploy-production]
    if: success()
    
    steps:
    - name: Cleanup old environment
      env:
        OLD_ENV: ${{ needs.validate.outputs.current_environment }}
        TARGET_ENV: ${{ needs.validate.outputs.target_environment }}
      run: |
        echo "Scheduling cleanup of old environment: $OLD_ENV"
        
        # In production, this would:
        # 1. Scale down old environment after grace period
        # 2. Remove old deployment artifacts
        # 3. Update DNS/load balancer routing
        
        echo "✅ Cleanup scheduled for $OLD_ENV (grace period: 5 minutes)"